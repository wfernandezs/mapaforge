# <type>(<scope>): <subject>

#

# <body>

#

# <footer>

# --- COMMIT END ---

# Type can be:

# feat (new feature)

# fix (bug fix)

# docs (changes to documentation)

# style (formatting, missing semi colons, etc; no code change)

# refactor (refactoring production code)

# test (adding missing tests, refactoring tests; no production code change)

# chore (updating grunt tasks etc; no production code change)

# perf (performance improvements)

# ci (changes to CI configuration files and scripts)

# build (changes that affect the build system or external dependencies)

# revert (reverts a previous commit)

# --------------------

# Scope is optional and can be anything specifying place of the commit change.

# For example $location, $browser, $compile, $rootScope, ngHref, ngClick, ngView, etc.

# In your case, it could be: ui, core, templates, validation, file-system, etc.

# --------------------

# Subject line rules:

# - Use imperative, present tense: "change" not "changed" nor "changes"

# - Don't capitalize first letter

# - No dot (.) at the end

# - Limit to 50 characters

# --------------------

# Body rules:

# - Wrap at 72 characters

# - Use imperative, present tense

# - Include motivation for the change and contrast with previous behavior

# --------------------

# Footer rules:

# - Reference issues and pull requests liberally

# - Use "Fixes #123" or "Closes #123" for issues

# - Use "BREAKING CHANGE:" for breaking changes

# --------------------

# Examples:

# feat(ui): add project type selection component

# fix(validation): resolve schema validation error for nested objects

# docs: update README with installation instructions

# refactor(core): extract plugin loading logic to separate module

# test(file-generator): add unit tests for template processing

# chore(deps): update electron to version 25.0.0
